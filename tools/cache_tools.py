import asyncio
from typing import List, Tuple

from database.anime_cache_repository import AnimeCacheRepository
import json
import os
from _configs.config import get_config
from _configs.log_config import logger


cfg = get_config()
ANIME_CACHE_PATH = cfg.cache_config.anime_cache_path

_cache_data = None
_last_mtime = 0


async def cache_anime_list(
    anime_entries: List[Tuple[int, dict]],
    repository: AnimeCacheRepository
) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ-–¥–∞–Ω–Ω—ã—Ö –≤ Supabase —á–µ—Ä–µ–∑ AnimeCacheRepository.

    :param anime_entries: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (anime_id, anime_entry)
    :param repository: –≠–∫–∑–µ–º–ø–ª—è—Ä AnimeCacheRepository
    """
    for anime_id, anime_entry in anime_entries:
        try:
            await repository.add_anime_cache(anime_id, anime_entry)
            logger.debug(f"[cache_anime_list] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {anime_id}")
        except Exception as e:
            logger.warning(f"[cache_anime_list] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID {anime_id} –≤ –ë–î\n{e}")


def cache_anime_list_in_background(
    anime_entries: List[Tuple[int, dict]],
    repository: AnimeCacheRepository
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∫—ç—à–∞ –∞–Ω–∏–º–µ –≤ Supabase.

    :param anime_entries: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (anime_id, anime_entry)
    :param repository: –≠–∫–∑–µ–º–ø–ª—è—Ä AnimeCacheRepository
    """
    try:
        asyncio.create_task(cache_anime_list(anime_entries, repository))
        logger.info(f"[cache_anime_list_in_background] üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ {len(anime_entries)} –∞–Ω–∏–º–µ")
    except Exception as e:
        logger.error(f"[cache_anime_list_in_background] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n{e}")


def get_anime_cache():
    global _cache_data, _last_mtime

    try:

        mtime = os.path.getmtime(ANIME_CACHE_PATH)
        logger.debug(f"[get_anime_cache] -> –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {mtime}")
        if _cache_data is None or mtime > _last_mtime:
            with open(ANIME_CACHE_PATH, "r", encoding="utf-8") as f:
                _cache_data = json.load(f)
                _last_mtime = mtime
                logger.info(f"[get_anime_cache] -> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ó–∞–º–µ—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {_last_mtime}")
        logger.info(f"[get_anime_cache] - –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"[get_anime_cache] - –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ—à: {e}")
        _cache_data = {}

    logger.debug(f"[get_anime_cache] - –í—ã–¥–∞—á–∞ –∫—ç—à–∞")
    return _cache_data