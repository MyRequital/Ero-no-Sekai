import json
import random
import uuid
from aiogram import Router, F, types, Bot
from tools.cache_tools import get_anime_cache
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import asyncio
from aiogram.enums import ParseMode
from _configs.log_config import logger
from tools.inline_query_tools import clean_description, safe_join, build_anime_caption
from tools.common_utils import delete_message_safe, get_player_url, get_kodik_data_for_site, get_kodik_response
from _configs.config import get_config
from aiogram.exceptions import TelegramBadRequest


cfg = get_config()

ANIME_CACHE_PATH = cfg.cache_config.anime_cache_path
BOT_URL = cfg.bot_config.bot_url
BOT_USERNAME = cfg.bot_config.bot_username
DEV_USERNAME = cfg.dev_config.dev_username
DEV_URL = cfg.dev_config.dev_url
GROUP_ID = cfg.bot_config.group_id
GROUP_URL = cfg.bot_config.group_url


router = Router()


logger.info(f"[inline_anime] - –ü—É—Ç—å –∫—ç—à–∞ –∞–Ω–∏–º–µ -> {ANIME_CACHE_PATH}")
BASE_URL = "https://ero-no-sekai.up.railway.app/watch/?sid="


# ====== Inline Query Handler ======
@router.inline_query()
async def inline_anime_handler(inline_query: InlineQuery, bot: Bot):
    user_id = inline_query.from_user.id

    try:
        member = await bot.get_chat_member(chat_id=GROUP_ID, user_id=user_id)
        if member.status not in ("member", "administrator", "creator"):
            raise ValueError("–ù–µ –≤ –≥—Ä—É–ø–ø–µ")
    except TelegramBadRequest:
        await send_join_group_card(inline_query)
        return
    except Exception as e:
        logger.error(f"[inline_anime_handler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ: {e}")
        await send_join_group_card(inline_query)
        return

    query_text = inline_query.query.lower()

    anime_cache = get_anime_cache()

    logger.info(f"[inline_anime_handler] - –ü–æ–ª—É—á–µ–Ω inline_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inline_query.from_user.id}: '{query_text}'"
                f"\n–ù–∞–ª–∏—á–∏–µ –∫—ç—à–∞: {True if anime_cache else False}"
                f"\n–¢–∏–ø –∫—ç—à-–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {type(anime_cache)}")

    if not query_text:
        animes_list = random.sample(list(anime_cache.values()), k=min(20, len(anime_cache)))
    else:
        logger.violet(f"[inline_anime_handler] - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ anime_cache: {json.dumps(anime_cache, indent=4, ensure_ascii=False)}")

        animes_list = []

        for index, anime in enumerate(anime_cache.values()):
            if not isinstance(anime, dict):
                logger.error(f"[inline_anime_handler] - –≠–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º {index} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º: {repr(anime)}")
                continue

            russian_value = anime.get('russian')
            name_value = anime.get('name')

            if russian_value is None:
                logger.warning(f"[inline_anime_handler] - anime[{index}] c id: {anime['id']} ‚Üí –∫–ª—é—á 'russian' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None")
            if name_value is None:
                logger.warning(f"[inline_anime_handler] - anime[{index}] c id: {anime['id']} ‚Üí –∫–ª—é—á 'name' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ None")

            russian_text = russian_value or ''
            name_text = name_value or ''

            try:
                if query_text in russian_text.lower() or query_text in name_text.lower():
                    logger.info(f"[inline_anime_handler] - anime[{index}] ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å –∑–∞–ø—Ä–æ—Å–æ–º")
                    animes_list.append(anime)
            except Exception as e:
                logger.error(f"[inline_anime_handler] - anime[{index}] ‚Üí –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")
                logger.debug(f"[inline_anime_handler] - anime[{index}] ‚Üí russian: {repr(russian_value)}, name: {repr(name_value)}")


    logger.info(f"[inline_anime_handler] - –í—ã–±—Ä–∞–Ω–æ {len(animes_list)} –∞–Ω–∏–º–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

    results = []

    for anime in animes_list:

        if not isinstance(anime, dict):
            logger.error(f"[inline_anime_handler] - –û—à–∏–±–∫–∞: anime –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º: {repr(anime)}")
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç

        unique_id = str(uuid.uuid4())
        anime_id = str(anime.get("id"))

        logger.debug(json.dumps(anime, indent=4, ensure_ascii=False))

        genres = anime.get("genres", [])
        studios = anime.get("studios", [])
        description = clean_description(anime.get("description", ""))[:300]
        poster_preview_url = anime.get('mainUrl')

        if inline_query.chat_type == "private":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤

            message_text = (
                f"üé¨ <b>{anime.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b> (<i>{anime.get('russian', '...')}</i>)\n"
                f"‚≠êÔ∏è <b>–û—Ü–µ–Ω–∫–∞:</b> {anime.get('score', '?')}/10\n"
                f"üîñ <b>–ñ–∞–Ω—Ä—ã:</b> {safe_join(genres)}\n"
                f"üè¢ <b>–°—Ç—É–¥–∏—è:</b> {safe_join(studios)}\n"
                f"üì∫ <b>–≠–ø–∏–∑–æ–¥—ã:</b> {anime.get('episodes', '?')}\n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
                f"üîó <a href='{anime.get('url', '')}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ Shikimori</a>\n"
                f"üîó <a href='{anime.get('url', '')}/characters'>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</a>"
            )



            result = get_kodik_response(anime.get('id'))
            markup = None

            if result.status_code == 200:
                result = result.json()
                try:

                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚ñ∂ –°–º–æ—Ç—Ä–µ—Ç—å", url=BASE_URL+anime_id)
                        ]
                    ])

                except Exception as e:
                    logger.error(f"[inline_anime_handler] - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ player_url {e} \nplayer_url={json.dumps(result, indent=4, ensure_ascii=False)}")

            input_message_content = InputTextMessageContent(
                message_text=message_text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False
            )

            results.append(
                InlineQueryResultArticle(
                    id=unique_id,
                    title=anime.get('russian') or anime.get('name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    description=clean_description(anime.get("description", ""))[:100] + "...",
                    input_message_content=input_message_content,
                    reply_markup=markup,
                    thumb_url=poster_preview_url,
                    thumb_width=128,
                    thumb_height=200
                )
            )

        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –±–æ—Ç
            input_message_content = InputTextMessageContent(
                message_text=anime_id,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

            results.append(
                InlineQueryResultArticle(
                    id=unique_id,
                    title=anime.get('russian') or anime.get('name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    description=(clean_description(anime.get("description", ""))[:100] + "..."),
                    input_message_content=input_message_content,
                    thumb_url=poster_preview_url,
                    thumb_width=128,
                    thumb_height=200
                )
            )

    if not results:
        logger.warning(f"[inline_anime_handler] - –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_text}'")

        unique_id = str(uuid.uuid4())

        input_message_content = InputTextMessageContent(
            message_text=(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å.\n"
                f"–û–±—Ä–∞—Ç–∏—Å—å –∫ {DEV_USERNAME}, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ–±—ä—è—Å–Ω–∏—Ç –ø—Ä–∏—á–∏–Ω—É.\n"
                f"–ê –µ—â—ë –±—ã—Å—Ç—Ä–µ–µ ‚Äî <a href='{BOT_URL}'>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –±–æ—Ç—É</a> —Å –∫–æ–º–∞–Ω–¥–æ–π <code>/ssa (–Ω–∞–∑–≤–∞–Ω–∏–µ)</code>."
            ),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

        results.append(
            InlineQueryResultArticle(
                id=unique_id,
                title="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                description="–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '/ssa (–Ω–∞–∑–≤–∞–Ω–∏–µ)'",
                input_message_content=input_message_content,
                thumb_url='https://ero-no-sekai.up.railway.app/static/pictures/404_preview.jpg',
                thumb_width=128,
                thumb_height=200
            )
        )

    try:
        await inline_query.answer(results=results, cache_time=0)
        logger.info("[inline_anime_handler] - –û—Ç–≤–µ—Ç –Ω–∞ inline_query —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.exception(f"[inline_anime_handler] - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ inline_query: {e}")



# --- Message Handler for Anime ID ---
@router.message(F.text.regexp(r"^\d+$"))
async def anime_selected_handler(message: types.Message, bot: Bot) -> None:
    anime_id = message.text.strip()

    anime_cache = get_anime_cache()

    anime = anime_cache.get(anime_id)

    if not anime:
        await message.reply("üòï –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    caption, markup = build_anime_caption(anime)
    poster_url = anime["poster"]

    try:
        if poster_url:
            if markup:
                reply = await message.reply_photo(
                    photo=poster_url,
                    caption=caption,
                    parse_mode=ParseMode.HTML,
                    reply_markup=markup
                )
                logger.info(f"[anime_selected_handler] - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞–Ω–∏–º–µ ID={anime_id} –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π")
            else:
                reply = await message.reply_photo(
                    photo=poster_url,
                    caption=caption,
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"[anime_selected_handler] - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞–Ω–∏–º–µ ID={anime_id}")

        else:
            if markup:
                reply = await message.reply(
                    caption,
                    parse_mode=ParseMode.HTML,
                    reply_markup=markup
                )
            else:
                reply = await message.reply(
                    caption,
                    parse_mode=ParseMode.HTML
                )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∏–º–µ ID={anime_id}")

        _ = asyncio.create_task(delete_message_safe(message, delay=1))

    except Exception as e:
        logger.exception(f"[anime_selected_handler] -  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–Ω–∏–º–µ ID={anime_id}: {e}")


async def send_join_group_card(inline_query: InlineQuery):
    results = [
        InlineQueryResultArticle(
            id=str(uuid.uuid4()),
            title="–ü—Ä–æ—Å—Ç–∏, –Ω–æ, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
            description="–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã.",
            input_message_content=InputTextMessageContent(
                message_text="üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –≤—Å—Ç—É–ø–∏ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É:",
                parse_mode="HTML"
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=GROUP_URL)]
                ]
            ),
            thumb_url="https://ero-no-sekai.up.railway.app/static/pictures/_access_block.jpg",
            thumb_width=128,
            thumb_height=128
        )
    ]

    await inline_query.answer(results=results, cache_time=0, is_personal=True)
