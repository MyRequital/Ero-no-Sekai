import os
import time
from pathlib import Path

import aiohttp
from aiofiles import open as aio_open
from aiofiles.os import path as aio_path
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile

from _configs.config import BASE_DIR
from _configs.log_config import logger
from services.supabase.supabase_instance import supabase_client

CACHE_AVATARS = os.path.join(BASE_DIR, 'assets', 'users_icon_avatars')


router = Router()

@router.message(Command("test_icon"))
async def test_icon_handler(message: Message, users_data):
    target_user_id = message.from_user.id
    target_username = None

    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                target_username = message.text[entity.offset: entity.offset + entity.length]
                break

    if target_username:
        resolved_id = await users_data.get_user_id_by_username(target_username)
        if resolved_id:
            target_user_id = resolved_id
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

    try:
        base_url = supabase_client.client.storage \
            .from_("shinigami-users-avatars") \
            .get_public_url(f"avatars/{target_user_id}.jpg")

        # –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
        avatar_url = f"{base_url}?v={int(time.time())}"

        await message.answer_photo(
            photo=avatar_url,
            caption=f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username or '—Ç–µ–∫—É—â–µ–≥–æ'}"
        )
        return

    except Exception as e:
        fallback_path = os.path.join(BASE_DIR, "assets", "users_icon_avatars", "default.jpg")

        if not os.path.exists(fallback_path):
            await message.reply("–ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏ –∑–∞–≥–ª—É—à–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        await message.answer_photo(
            photo=FSInputFile(fallback_path),
            caption=f"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username or '—Ç–µ–∫—É—â–µ–≥–æ'}"
        )


async def get_users_avatar(user_id: int | str) -> str:
    avatar_filename = f"{user_id}.jpg"
    avatar_path = os.path.join(CACHE_AVATARS, avatar_filename)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—ç—à
    if await aio_path.exists(avatar_path):
        return avatar_path

    try:
        # üõ∞Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑ Supabase
        base_url = supabase_client.client.storage \
            .from_("shinigami-users-avatars") \
            .get_public_url(f"avatars/{user_id}.jpg")

        avatar_url = f"{base_url}?v={int(time.time())}"

        async with aiohttp.ClientSession() as session:
            async with session.get(avatar_url) as response:
                content_type = response.headers.get("Content-Type", "")
                if response.status == 200 and content_type.startswith("image/"):
                    image_bytes = await response.read()

                    Path(CACHE_AVATARS).mkdir(parents=True, exist_ok=True)
                    async with aio_open(avatar_path, "wb") as f:
                        await f.write(image_bytes)

                    return avatar_path
                else:
                    raise ValueError(f"‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –°—Ç–∞—Ç—É—Å: {response.status}, –¢–∏–ø: {content_type}")

    except Exception as e:
        logger.warning(f"[get_users_avatar] - ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è {user_id}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞. –û—à–∏–±–∫–∞: {e}")

        fallback_path = os.path.join(CACHE_AVATARS, "default.jpg")

        # ‚úÖ –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        if not await aio_path.exists(fallback_path):
            default_source_path = os.path.join(BASE_DIR, "assets", "users_icon_avatars", "default.jpg")
            try:
                async with aio_open(default_source_path, "rb") as src:
                    default_bytes = await src.read()
                async with aio_open(fallback_path, "wb") as dst:
                    await dst.write(default_bytes)
            except Exception as file_error:
                logger.error(f"[get_users_avatar] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ fallback –∞–≤–∞—Ç–∞—Ä–∞: {file_error}")
                return default_source_path  # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–∏–∫—É

        return fallback_path