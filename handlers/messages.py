import asyncio
import random
import re
from datetime import datetime, timedelta
from random import random

from aiogram import F
from aiogram import Router
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import or_f
from aiogram.types import BufferedInputFile
from aiogram.types import Message, ChatPermissions

from _configs.config import get_config
from _configs.log_config import logger
from tools.common_utils import get_weather_with_icon, delete_message_safe, check_bad_words

router = Router()
cfg = get_config()

TIMER_REMOVAL = cfg.bot_config.timer_removal
GROUP_ID = cfg.bot_config.group_id
BAN_DAYS = cfg.bot_config.ban_days
LIMIT_WARNINGS = cfg.bot_config.limit_warnings



@router.message(F.text.regexp(r"–∏+\s*–≥–æ—Ä—å –∫—Ç–æ —è", flags=re.IGNORECASE))
async def handle_who_am_i(message: Message, users_data):
    if message:
        _ = asyncio.create_task(delete_message_safe(message, TIMER_REMOVAL))
    await users_data.set_anime_name(message.from_user.id)
    funny_name = await users_data.get_anime_name(message.from_user.id)
    if message:
        message_bot = await message.reply(f"–°–µ–≥–æ–¥–Ω—è —Ç—ã: {funny_name}")
        if message_bot:
            _ = asyncio.create_task(delete_message_safe(message, TIMER_REMOVAL))
    else:
        _ = await message.bot.send_message(chat_id=GROUP_ID,
                                           text=("–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. "
                                           "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π—Ç–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∫–æ –º–Ω–µ - —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–∞–º."
                                           "\n–Ø –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ª–æ–≤–ª—é –≤–∞—à –∑–∞–ø—Ä–æ—Å - –∏ –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ."))

@router.message(F.text.lower() == "chatid")
async def send_chat_id(message: Message):
    await message.reply(f"Chat ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")

@router.message(F.text.regexp(r'.*–¥–∞\s–∏+–≥–æ—Ä—å\?', flags=re.IGNORECASE))
async def send_igor_yes(message: Message):
    await message.reply("–ö–æ–Ω–µ—á–Ω–æ! –≠—Ç–æ –∏—Å—Ç–∏–Ω–∞!")

@router.message(F.text.regexp(
    r'^(.*?–∏+–≥–æ—Ä—å|–±–æ—Ç)\s+(–ø—Ä–æ—Å—Ç–∏|–∏–∑–≤–∏–Ω–∏?|—Å–æ—Ä(—è–Ω|—Ä–∏)|–ø–∞—Ä–¥–æ–Ω|–≤–∏–Ω–æ–≤–∞—Ç|–ø—Ä–æ—à[—É—É] –ø—Ä–æ—â–µ–Ω–∏—è?)',
    flags=re.IGNORECASE)
) # —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
async def send_srry(message: Message):
    if message:
        _ = asyncio.create_task(delete_message_safe(message, TIMER_REMOVAL))

    status = random.choices(["–ü–†–ò–ù–Ø–¢–û ‚úÖ", "–û–¢–ö–õ–û–ù–ï–ù–û ‚ùå"], weights=[0.7, 0.3])[0]
    guilt_level = random.randint(0, 50) if "–ü–†–ò–ù–Ø–¢–û" in status else random.randint(51, 100)
    demon_phrase = random.choice([
        "üëø –î–µ–º–æ–Ω—ã —Å–Ω–∏–∑—è—Ç –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä–µ—à–Ω–æ—Å—Ç–∏",
        "‚òï –°–∞—Ç–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–∏–ª —á–∞–π–Ω–∏–∫",
        "üìú –õ–µ–≥–∏–æ–Ω —Ç—å–º—ã –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å –≤ –æ—á–µ—Ä–µ–¥—å",
        "‚ùÑÔ∏è –ê–¥—Å–∫–∏–µ –ø–µ—á–∏ –æ—Å—Ç—ã–≤–∞—é—Ç –≤ –≤–∞—à—É —á–µ—Å—Ç—å"
    ])

    response = (
        f"<b>‚öñÔ∏è –í–µ—Ä–¥–∏–∫—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∑–≤–∏–Ω–µ–Ω–∏–π</b>\n\n"
        f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
        f"‚ñ´Ô∏è –£—Ä–æ–≤–µ–Ω—å –≤–∏–Ω—ã: {guilt_level}% "
        f"{'üòá –ù–µ–≤–∏–Ω–Ω—ã–π' if guilt_level < 30 else 'üòà –ì—Ä–µ—Ö–æ–≤–Ω—ã–π' if guilt_level > 70 else 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'}\n"
    )

    if "–ü–†–ò–ù–Ø–¢–û" in status:
        response += (
            f"\n‚≠ê {random.choice(['–û—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç –∫–∞—Ä–º—ã', '–ê–Ω–≥–µ–ª—ã –∞–ø–ª–æ–¥–∏—Ä—É—é—Ç', '–ì—Ä–µ—Ö–∏ –æ–±–Ω—É–ª–µ–Ω—ã'])}\n"
            f"\n{demon_phrase}\n"
            f"üéâ <i>–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!</i>"
        )
    else:
        response += (
            f"\n‚ö†Ô∏è {random.choice(['–°–ª–∏—à–∫–æ–º –º–∏–ª–æ–µ –∏–∑–≤–∏–Ω–µ–Ω–∏–µ', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–µ–∑', '–î–µ–º–æ–Ω—ã —Ç—Ä–µ–±—É—é—Ç –∂–µ—Ä—Ç–≤—É'])}\n"
            f"üî• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {random.choice(['–ü—Ä–∏–Ω–µ—Å—Ç–∏ –º–µ–º–∞-–∂–µ—Ä—Ç–≤—É', '–ê–Ω–∏–º–µ-–º–∞—Ä–∞—Ñ–æ–Ω 24—á', '–ü–æ–∫–∞—è—Ç—å—Å—è –≤ /game'])}\n"
            f"\n{demon_phrase} üëπ"
        )

    sorry = await message.reply(response, parse_mode="HTML")

    if sorry:
        _ = asyncio.create_task(delete_message_safe(sorry, TIMER_REMOVAL))


@router.message(F.text.regexp(r'.*–∏+–≥–æ—Ä—å\s+–ø–æ–∏–≥—Ä–∞–µ–º', flags=re.IGNORECASE)) # —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
async def send_play(message: Message):
    _ = asyncio.create_task(delete_message_safe(message, TIMER_REMOVAL))
    message = await message.reply(
                                    '–í–æ —á—Ç–æ –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å?'
                                    '\n/to_play - –≥–æ—Ä–æ–¥–∞'
                                    '\n/to_play(–Ω–∞ –∑–∞–º–µ–Ω—É) - –≥–æ—Ä–æ–¥–∞(–Ω–∞ –∑–∞–º–µ–Ω—É)'
                                    '\n\n/out_game - –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥'
                                )
    if message:
        _ = asyncio.create_task(delete_message_safe(message, TIMER_REMOVAL))

@router.message(or_f(
    F.text.regexp(r'(–∏–≥–æ—Ä—å|–±–æ—Ç)\s+(–∫–∞–∫–æ–≤–∞|–∫–∞–∫–æ–π)\s+(–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å|—à–∞–Ω—Å)\s+(—Ç–æ–≥–æ\s+)?—á—Ç–æ\s+(.+)', flags=re.IGNORECASE),
    F.text.regexp(r'(–∏–≥–æ—Ä—å|–±–æ—Ç)\s+—à–∞–Ω—Å\s+(—Ç–æ–≥–æ\s+)?—á—Ç–æ\s+(.+)', flags=re.IGNORECASE),
    F.text.regexp(r'(–∏–≥–æ—Ä—å|–±–æ—Ç)\s+–Ω–∞—Å–∫–æ–ª—å–∫–æ\s+–≤–µ—Ä–æ—è—Ç–Ω–æ\s+—á—Ç–æ\s+(.+)', flags=re.IGNORECASE)
))
async def send_chance(message: Message):
    _ = asyncio.create_task(delete_message_safe(message, TIMER_REMOVAL))

    for pattern in [
        r'(?:–∏–≥–æ—Ä—å|–±–æ—Ç)\s+(?:–∫–∞–∫–æ–≤–∞|–∫–∞–∫–æ–π)\s+(?:–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å|—à–∞–Ω—Å)\s+(?:—Ç–æ–≥–æ\s+)?—á—Ç–æ\s+(.+)',
        r'(?:–∏–≥–æ—Ä—å|–±–æ—Ç)\s+—à–∞–Ω—Å\s+(?:—Ç–æ–≥–æ\s+)?—á—Ç–æ\s+(.+)',
        r'(?:–∏–≥–æ—Ä—å|–±–æ—Ç)\s+–Ω–∞—Å–∫–æ–ª—å–∫–æ\s+–≤–µ—Ä–æ—è—Ç–Ω–æ\s+—á—Ç–æ\s+(.+)'
    ]:
        match = re.search(pattern, message.text, re.IGNORECASE)
        if match:
            text = match.group(1).strip()
            break
    else:
        return

    replacements = {
        r'\b–º–µ–Ω—è\b': '—Ç–µ–±—è',
        r'\b–º–æ–µ–≥–æ\b': '—Ç–≤–æ–µ–≥–æ',
        r'\b–º–æ–µ\b': '—Ç–≤–æ–µ',
        r'\b–º–æ–π\b': '—Ç–≤–æ–π',
        r'\b–º–æ—è\b': '—Ç–≤–æ—è',
        r'\b–º–æ–∏\b': '—Ç–≤–æ–∏',
        r'\b—è\b': '—Ç—ã'
    }

    for pattern, replacement in replacements.items():
        text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)

    text = text.rstrip('?')

    responses = [
        f'–®–∞–Ω—Å —Ç–æ–≥–æ, —á—Ç–æ {text} - {random.randint(0, 100)}%',
        f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {random.randint(0, 100)}%, —á—Ç–æ {text}',
        f'–ú–æ–∏ —Ä–∞—Å—á–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç {random.randint(0, 100)}% –Ω–∞ —Ç–æ, —á—Ç–æ {text}',
        f'{random.randint(0, 100)} –∏–∑ 100, —á—Ç–æ {text}'
    ]

    message = await message.reply(random.choice(responses))
    if message:
        _ = asyncio.create_task(delete_message_safe(message, 60))


@router.message(F.text.regexp(r"^–∏+–≥–æ—Ä—å.*\?$", flags=re.IGNORECASE))
async def true(message: Message):
    await message.reply(f"{random.choice(['–î–∞', '–ù–µ—Ç'])}")


@router.message(F.text.regexp(r'–∏+–≥–æ—Ä—å –ø–æ–≥–æ–¥–∞\s+(.+)', flags=re.IGNORECASE))
async def weather_handler(message: Message):
    _ = asyncio.create_task(delete_message_safe(message, 10))
    text = message.text.lower()
    match = re.search(r'–∏+–≥–æ—Ä—å –ø–æ–≥–æ–¥–∞\s+(.+)', text)
    city = match.group(1).strip()

    spoils = [
        f"–°–Ω–∏–º–∞—é —Ç—Ä—É—Å–∏–∫–∏ —Å –æ–±–ª–∞–∫–æ–≤ –≤ {city.capitalize()}...\n"
        f"–ø–æ–≥–æ–¥–∫–∞ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç~",

        f"–ü–æ–≥–ª–∞–∂–∏–≤–∞—é —Ç–µ—Ä–º–æ–º–µ—Ç—Ä –≤ {city.capitalize()}...\n"
        f"–º–º–º, –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ~",

        f"–ò—â—É —Ç–≤–æ–π {city.capitalize()} –Ω–∞ –∫–∞—Ä—Ç–µ...\n"
        f"–ø–∞–ª—å—á–∏–∫–æ–º...\n"
        f"–º–µ–¥–ª–µ–Ω–Ω–æ..."

    ]

    spoil = await message.answer(random.choice(spoils), show_alert=True)
    if spoil:
        _ = asyncio.create_task(delete_message_safe(spoil, 3))


    if match:
        weather_text, icon_file = get_weather_with_icon(city)

        if weather_text and icon_file:
            file = BufferedInputFile(icon_file.read(), filename="weather.png")

            reply = await message.answer_photo(
                photo=file,
                caption=weather_text,
                parse_mode="HTML"
            )
            if reply:
                _ = asyncio.create_task(delete_message_safe(reply, TIMER_REMOVAL))
        else:
            error_message = (
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ <i>{city}</i>.\n\n"
                f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è:</b>\n"
                f"‚Ä¢ <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</i>\n"
                f"‚Ä¢ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.</i>\n"
                f"‚Ä¢ <i>–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–µ—Ä—É.</i>\n\n"
                f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            reply = await message.answer(error_message, parse_mode="HTML")
            if reply:
                _ = asyncio.create_task(delete_message_safe(reply, TIMER_REMOVAL))


@router.message(F.text)
async def filter_bad_words(message: Message, bot, users_data):
    if not message.text or message.text.startswith('üé¨') or message.text.startswith('üî•'):
        return

    user_id = message.from_user.id
    await users_data.increment_message_count(user_id)

    try:
        logger.debug(
            f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ filter_bad_words: {message.text}"
            f"\n–ê–π–¥–∏ —Ç–æ–ø–∏–∫–∞: {message.message_thread_id or '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–π–¥–∏'}"
            f"\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞: "
            f"{getattr(message.reply_to_message.forum_topic_created, 'name', '–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞') if message.reply_to_message and message.reply_to_message.forum_topic_created else '–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞'}"
        )

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        user_exists = await users_data.get_user_id(message.from_user.username)

        if user_exists is None:
            await users_data.add_new_user(
                user_id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )

        try:
            await users_data.increment_message_count(user_id)
        except Exception as err:
            logger.warning(f"[FilterBadWords] - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π.\n{err}")

        # === –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ ===
        access_lvl = await users_data.get_access_lvl(user_id)


        if access_lvl >= 7:
            logger.debug(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Å –¥–æ—Å—Ç—É–ø–æ–º {access_lvl} ‚Äî –Ω–µ –Ω–∞–∫–∞–∑—É–µ–º.")
            return

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ ===
        result, original_word, trigger_word = check_bad_words(message.text)

        if result:
            logger.info(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ —É @{message.from_user.username}: '{original_word}' ‚Üí '{trigger_word}'")

            total_warnings, should_ban = await users_data.add_warning_to_user(user_id)

            if should_ban:
                until_date = datetime.now() + timedelta(days=BAN_DAYS)
                try:
                    await bot.restrict_chat_member(
                        chat_id=message.chat.id,
                        user_id=user_id,
                        permissions=ChatPermissions(can_send_messages=False),
                        until_date=until_date
                    )
                    reply = await message.reply(
                        f'‚õî <b>@{message.from_user.username}</b> –ø–æ–ª—É—á–∏–ª(-–∞) <b>–±–∞–Ω –Ω–∞ {BAN_DAYS} –¥–Ω—è</b>!\n'
                        f'(–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: <b>{total_warnings}/{LIMIT_WARNINGS}</b>)'
                        f'\n–ú–∞—Ç: <code>{original_word}</code> ‚Üí <b>{trigger_word}</b>'
                    )
                    _ = asyncio.create_task(delete_message_safe(reply, TIMER_REMOVAL))
                except (TelegramBadRequest, TelegramForbiddenError) as e:
                    logger.warning(f"[FilterBadWords] - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            else:
                reply = await message.reply(
                    f'‚ö† <b>@{message.from_user.username}</b> –ø–æ–ª—É—á–∏–ª(-–∞) <b>–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>.\n'
                    f'–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{total_warnings}/{LIMIT_WARNINGS}</b>'
                    f'\n–ú–∞—Ç: <code>{original_word}</code> ‚Üí <b>{trigger_word}</b>'
                )
                _ = asyncio.create_task(delete_message_safe(reply, TIMER_REMOVAL))

    except Exception as e:
        logger.error(f"[FilterBadWords] - {e}")
        try:
            reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è')
            _ = asyncio.create_task(delete_message_safe(reply, TIMER_REMOVAL))
        except Exception as reply_error:
            logger.error(f"[Error - FilterBadWords] - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {reply_error}")



logger.info('[Messages] - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')

