from aiogram.fsm.context import FSMContext
from aiogram import Router, types, F
from aiogram.filters import Command, or_f

from api.shikimori_api import shikimori_requests
from _configs.log_config import logger
from data.shikimori_genres import GENRES
from data.shikimori_genres_id_to_name import GENRES_ID_TO_NAME
from tools.common_utils import delete_message_safe, get_player_url, get_kodik_response
import re
from aiogram.types import InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton

import uuid
import json
from _configs.config import get_config, BASE_DIR


router = Router()
cfg = get_config()

dev_url = cfg.dev_config.dev_url

BASE_URL = "https://ero-no-sekai.up.railway.app/watch/?sid="


@router.message(or_f(Command("ssa"), Command("shikimori_send_anime")))
async def search_anime_carousel(message: types.Message, command: F.CommandObject, state: FSMContext, users_data, **kwargs):
    try:
        title_name = message.text.split(" ", 1)[1].strip()
    except IndexError:
        await message.reply("üîç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /ssa –ù–∞—Ä—É—Ç–æ", parse_mode="Markdown")
        return

    mes = await message.answer(
        f"–°–æ–∑–¥–∞—é –ø–æ–¥–±–æ—Ä–∫—É –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ¬´<b>{title_name.capitalize()}</b>¬ª"
        f"\n\n–ù–∞–¥–µ—é—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª :)"
    )

    if mes:
        await delete_message_safe(mes, 5)

    ani_data, is_cache = await shikimori_requests.get_data_anime_by_name(title_name, limit=10)

    if "error" in ani_data:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ API: {ani_data['error']}"
                            f"\n–ù–µ –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏—è, –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º :)"
                            f"\n –û–±—Ä–∞—Ç–∏—Å—å –∫ <a href='{dev_url}'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>")
        return

    carousel_id = str(uuid.uuid4())
    data = await state.get_data()
    carousels = data.get("carousels", {})

    if not is_cache:
        animes = ani_data.get("data", {}).get("animes", [])
        logger.violet(f"[ssa] - json –ª–æ–≥"
                      f"\n{json.dumps(animes, indent=4, ensure_ascii=False)}")
        if not animes:
            await message.reply("üòï –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        carousels[carousel_id] = {
            "animes": animes,
            "title": title_name,
            "total": len(animes),
            "current_index": 0,
            "owner_id": message.from_user.id
        }
        await state.update_data(carousels=carousels)
        await send_anime_carousel_item(message, state, carousel_id)

    else:
        logger.violet(f"[ssa] - json –ª–æ–≥"
                      f"\n{json.dumps(ani_data, indent=4, ensure_ascii=False)}")
        if not ani_data:
            await message.reply("üòï –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        carousels[carousel_id] = {
            "animes": ani_data,
            "title": title_name,
            "total": len(ani_data),
            "current_index": 0,
            "owner_id": message.from_user.id
        }
        await state.update_data(carousels=carousels)
        await send_anime_cache_carousel_item(message, state, carousel_id)


@router.message(Command("ssag"))
async def search_anime_by_genre_carousel(message: types.Message, state: FSMContext, users_data, **kwargs):
    try:
        args = message.text.split(" ", 2)[1:]
        if not args:
            await message.reply(
                "üìå –£–∫–∞–∂–∏ –∂–∞–Ω—Ä –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<code>/ssag —Ä–æ–º–∞–Ω—Ç–∏–∫–∞ 7</code>",
                parse_mode="HTML")
            return

        genre_name = args[0].lower()
        min_score = int(args[1]) if len(args) > 1 and args[1].isdigit() else 7
        logger.info(f"[GenreCarousel] - –†–µ–π—Ç–∏–Ω–≥ {min_score}")

        genre_id = GENRES.get(genre_name)
        if genre_id is None:
            await message.reply("üòï –¢–∞–∫–æ–π –∂–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        mes = await message.answer(
            f"–°–æ–∑–¥–∞—é –ø–æ–¥–±–æ—Ä–∫—É –∞–Ω–∏–º–µ –ø–æ –∂–∞–Ω—Ä—É ¬´<b>{GENRES_ID_TO_NAME.get(genre_id).capitalize()}</b>¬ª, —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ <b>{min_score}</b>."
            f"\n\n<i>*–ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–±—Ä–∞—Ç—å –∞–Ω–∏–º–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º <b>–≤—ã—à–µ 8</b> –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å <b>–≤—Ä–µ–º—è</b> ‚Äî –∫–∞–∫ –≤–∞—à–µ, —Ç–∞–∫ –∏ –º–æ—ë."
            f"–ê, —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∞–π–Ω–µ –º–∞–ª.</i>"
        )

        if mes:
            await delete_message_safe(mes, 5)

        animes = await shikimori_requests.get_data_anime_by_genre(
            genre_id=genre_id,
            min_score=min_score,
            limit=10,
            tries=3
        )

        if not animes:
            logger.error(f"[GenreCarousel] - –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –ø–æ –∂–∞–Ω—Ä—É {genre_name}(id={genre_id})")
            await message.reply("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ –ø–æ —ç—Ç–æ–º—É –∂–∞–Ω—Ä—É.")
            return

        carousel_id = str(uuid.uuid4())
        data = await state.get_data()
        carousels = data.get("carousels", {})

        carousels[carousel_id] = {
            "animes": animes,
            "title": genre_name,
            "total": len(animes),
            "current_index": 0,
            "owner_id": message.from_user.id
        }
        await state.update_data(carousels=carousels)
        await send_anime_carousel_item(message, state, carousel_id)

    except Exception as e:
        logger.error(f"[SSAG Handler Error] - {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@router.message(Command("sstop10"))
async def top10_anime_by_year(message: types.Message, state: FSMContext, users_data, **kwargs):
    try:
        args = message.text.split(" ", 2)[1:]
        year = int(args[0]) if len(args) >= 1 and args[0].isdigit() else 2024
        min_score = int(args[1]) if len(args) >= 2 and args[1].isdigit() else 7

        logger.info(f"[Top10Carousel] - –ì–æ–¥: {year}, –ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥: {min_score}")

        mes = await message.answer(f"üîç –ò—â—É —Ç–æ–ø-10 –∞–Ω–∏–º–µ –∑–∞ {year} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ {min_score}...")
        if mes:
            await delete_message_safe(mes, 10)

        animes = shikimori_requests.get_top_anime_by_year_and_rating(
            year=year,
            min_score=min_score,
            attempts=3
        )

        logger.debug(f"[Top10Carousel] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ: {animes}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ
        if not animes or not isinstance(animes, list):
            logger.warning(f"[Top10Carousel] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–µ –∑–∞ {year} —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º >= {min_score}")
            await message.reply("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
            return

        filtered = [anime for anime in animes if anime.get("score", 0) >= min_score]
        logger.debug(f"[Top10Carousel] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É {min_score}): {filtered}")

        if not filtered:
            logger.warning(f"[Top10Carousel] –ù–µ—Ç –∞–Ω–∏–º–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º >= {min_score}")
            await message.reply("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ —Å –Ω—É–∂–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º.")
            return

        anime_list = filtered[:10]

        data = await state.get_data()
        last_msg_id = data.get("anime_carousel_last_message_id")
        if last_msg_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
            except Exception:
                pass

        await state.update_data(
            anime_carousel={
                "animes": anime_list,
                "title": f"–¢–û–ü 10 ({year}+)",
                "total": len(anime_list),
                "current_index": 0,
                "owner_id": message.from_user.id
            },
            anime_carousel_last_message_id=None
        )

        await send_anime_carousel_item(message, state)

    except Exception as e:
        logger.error(f"[Top10Carousel] - {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")



async def send_anime_carousel_item(message: types.Message | types.CallbackQuery, state: FSMContext, carousel_id: str):
    data = await state.get_data()
    carousels = data.get("carousels", {})
    anime_carousel = carousels.get(carousel_id, {})

    animes = anime_carousel.get("animes", [])
    title_name = anime_carousel.get("title", "")
    total = anime_carousel.get("total", 0)
    current_index = anime_carousel.get("current_index", 0)

    if not animes or current_index >= len(animes):
        await (message.reply("üòï –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–µ.") if isinstance(message, types.Message)
               else message.answer("üòï –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–µ."))
        return

    anime = animes[current_index]

    poster_url = anime.get("poster").get("mainUrl") if anime.get("poster").get("mainUrl") else anime.get("poster").get("originalUrl")
    logger.info(f"[SEND ITEM] -> poster_url = {poster_url}")


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    description = anime.get("description") or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    description = remove_character_tags(description)
    if len(description) > 300:
        description = description[:300] + "..."

    anime_id = anime.get('id')
    genres = [g.get("russian", "") for g in anime.get("genres", [])]
    studios = [s.get("name", "") for s in anime.get("studios", [])]

    result = get_kodik_response(anime_id)

    player_url = None
    if result.status_code == 200:
        result_json = result.json()
        results = result_json.get('results', [])
        if results:
            player_url = get_player_url(results[0].get('link'))

    # –ö–Ω–æ–ø–∫–∏
    buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"anime_carousel:{carousel_id}:prev"),
            InlineKeyboardButton(text=f"{current_index + 1}/{total}", callback_data="anime_carousel:noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"anime_carousel:{carousel_id}:next")
        ]
    ]
    if player_url:
        buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å", url=BASE_URL + anime_id)])

    buttons.append([InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"anime_carousel:{carousel_id}:delete")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    caption = (
        f"üé¨ <b>{anime.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b> (<i>{anime.get('russian', '...')}</i>)\n"
        f"‚≠êÔ∏è <b>–û—Ü–µ–Ω–∫–∞:</b> {anime.get('score', '?')}/10\n"
        f"üîñ <b>–ñ–∞–Ω—Ä—ã:</b> {', '.join(genres) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üè¢ <b>–°—Ç—É–¥–∏—è:</b> {', '.join(studios) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}\n"
        f"üì∫ <b>–≠–ø–∏–∑–æ–¥—ã:</b> {anime.get('episodes', '?')}\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
        f"üîó <a href='{anime.get('url', '')}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ Shikimori</a>\n"
        f"üîó <a href='{anime.get('url', '')}/characters'>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</a>"
    )

    if isinstance(message, types.CallbackQuery):
        try:
            await message.message.edit_media(
                media=InputMediaPhoto(media=poster_url, caption=caption, parse_mode="HTML"),
                reply_markup=markup
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    else:
        await message.reply_photo(
            photo=poster_url,
            caption=caption,
            parse_mode="HTML",
            reply_markup=markup
        )


async def send_anime_cache_carousel_item(message: types.Message | types.CallbackQuery, state: FSMContext, carousel_id: str):
    data = await state.get_data()
    carousels = data.get("carousels", {})
    anime_carousel = carousels.get(carousel_id, {})

    animes = anime_carousel.get("animes", [])
    title_name = anime_carousel.get("title", "")
    total = anime_carousel.get("total", 0)
    current_index = anime_carousel.get("current_index", 0)

    if not animes or current_index >= len(animes):
        await (message.reply("üòï –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–µ.") if isinstance(message, types.Message)
               else message.answer("üòï –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–µ."))
        return

    anime = animes[current_index]


    poster_url = anime.get("poster")
    logger.info(f"[SEND CACHE ITEM] -> poster_url = {poster_url}")

    description = anime.get("description") or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    description = remove_character_tags(description)
    if len(description) > 300:
        description = description[:300] + "..."

    anime_id = anime.get('id')
    genres = anime.get("genres", [])
    studios = anime.get("studios", [])

    result = get_kodik_response(anime_id)

    player_url = None
    if result.status_code == 200:
        result_json = result.json()
        results = result_json.get('results', [])
        if results:
            player_url = get_player_url(results[0].get('link'))

    buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"anime_carousel:{carousel_id}:prev"),
            InlineKeyboardButton(text=f"{current_index + 1}/{total}", callback_data="anime_carousel:noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"anime_carousel:{carousel_id}:next")
        ]
    ]

    if player_url:
        buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å", url=BASE_URL + anime_id)])

    buttons.append([InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"anime_carousel:{carousel_id}:delete")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    caption = (
        f"üé¨ <b>{anime.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b> (<i>{anime.get('russian', '...')}</i>)\n"
        f"‚≠êÔ∏è <b>–û—Ü–µ–Ω–∫–∞:</b> {anime.get('score', '?')}/10\n"
        f"üîñ <b>–ñ–∞–Ω—Ä—ã:</b> {', '.join(genres) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üè¢ <b>–°—Ç—É–¥–∏—è:</b> {', '.join(studios) or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
        f"üîó <a href='{anime.get('url', '')}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ Shikimori</a>\n"
        f"üîó <a href='{anime.get('url', '')}/characters'>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏</a>"
    )

    if isinstance(message, types.CallbackQuery):
        try:
            await message.message.edit_media(
                media=InputMediaPhoto(media=poster_url, caption=caption, parse_mode="HTML"),
                reply_markup=markup
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    else:
        await message.reply_photo(
            photo=poster_url,
            caption=caption,
            parse_mode="HTML",
            reply_markup=markup
        )


@router.callback_query(F.data.startswith("anime_carousel:"))
async def handle_anime_carousel(callback: types.CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split(":")
        if len(parts) != 3:
            await callback.answer()
            return

        _, carousel_id, action = parts
        data = await state.get_data()
        carousels = data.get("carousels", {})
        anime_carousel = carousels.get(carousel_id)

        if not anime_carousel:
            await callback.answer("–ü—Ä–æ—Å—Ç–∏, –Ω–æ –∫–∞—Ä—É—Å–µ–ª—å —É—Å—Ç–∞—Ä–µ–ª–∞. \n–í—ã–∑–æ–≤–∏ –Ω–æ–≤—É—é :) \n*–≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", show_alert=True)
            return

        if anime_carousel.get("owner_id") != callback.from_user.id:
            await callback.answer("–≠—Ç–∞ –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
            return

        if action == "delete":
            try:
                await callback.message.delete()
            except Exception:
                pass
            carousels.pop(carousel_id, None)
            await state.update_data(carousels=carousels)
            return

        current_index = anime_carousel.get("current_index", 0)
        total = anime_carousel.get("total", 0)

        if action == "prev":
            new_index = (current_index - 1) % total
        elif action == "next":
            new_index = (current_index + 1) % total
        else:
            await callback.answer()
            return

        anime_carousel["current_index"] = new_index
        carousels[carousel_id] = anime_carousel
        await state.update_data(carousels=carousels)

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—ç—à —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç
        is_cache = isinstance(anime_carousel["animes"][0], dict) and isinstance(anime_carousel["animes"][0].get('poster'), str)

        if is_cache:
            await send_anime_cache_carousel_item(callback, state, carousel_id)
        else:
            await send_anime_carousel_item(callback, state, carousel_id)

    except Exception as e:
        logger.error(f"[HandlerAnimeCarousel] - {e}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}\n–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
    finally:
        await callback.answer()



def remove_character_tags(text: str) -> str:
    return re.sub(r'\[character[^\]]*\](.*?)\[/character\]', r'\1', text, flags=re.DOTALL)


