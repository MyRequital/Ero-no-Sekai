import asyncio
import os

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand
from uvicorn.config import Config
from uvicorn.server import Server

from _configs import config_commands
from _configs.config import get_config, set_config
from _configs.config_io import load_config_from_file
from _configs.log_config import logger
from api.supabase_api import supabase_loading_icon, supabase_uploading_icon
from database import repositories
from database.anime_cache_repository import init_anime_cache_repository
from database.users_data_middleware import UsersDataMiddleware
from database.anime_cache_repository import AnimeCacheRepository
from database.users_data_repository import init_users_data_repository
from handlers import messages, chat_member, movies_commands, user_data_handlers
from handlers.carousels import carousel_handlers
from handlers.carousels import character_carousel_handlers
from handlers.commands import commands, admin_commands
from handlers.games import city_games_handlers
from handlers.inline_anime import inline_anime
from web_app.app import create_app

cfg = get_config()

TELEGRAM_API_TOKEN = cfg.tg_config.token

# ===============================================

async def start_web_server():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Ñ–æ–Ω–µ"""
    app = await create_app()

    config = Config(
        app=app,
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        log_level="info",
        loop="asyncio",
        lifespan="off"
    )

    server = Server(config)
    await server.serve()

storage = MemoryStorage()

default_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_API_TOKEN, default=default_properties)
dp = Dispatcher(storage=storage)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
dp.include_router(inline_anime.router)                          # –†–æ—É—Ç –∏–Ω–ª–∞–π–Ω-–∞–Ω–∏–º–µ –∑–∞–ø—Ä–æ—Å–æ–≤
dp.include_router(chat_member.router)                           # –†–æ—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
dp.include_router(commands.router)                              # –†–æ—É—Ç –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
dp.include_router(city_games_handlers.router)                   # –†–æ—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞ (–Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω)
dp.include_router(movies_commands.router)                       # –†–æ—É—Ç Anilist-–∑–∞–ø—Ä–æ—Å–æ–≤ -- –†–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω)
dp.include_router(carousel_handlers.router)                     # –†–æ—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∏–º–µ-–∫–∞—Ä—É—Å–µ–ª–µ–π
dp.include_router(character_carousel_handlers.router)           # –†–æ—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ä–∞–∫—Ç–µ—Ä-–∫–∞—Ä—É—Å–µ–æ–µ–π
dp.include_router(user_data_handlers.router)                    # –†–æ—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è
dp.include_router(admin_commands.router)                        # –†–æ—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
dp.include_router(supabase_loading_icon.router)
dp.include_router(supabase_uploading_icon.router)
dp.include_router(config_commands.router)
dp.include_router(messages.router)                              # –ö–æ–Ω–µ—á–Ω—ã–π –†–æ—É—Ç. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥. –û–±—Ä–∞–±–æ—Ç–∫–∞
                                                                # –æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.


async def set_bot_commands():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏"""
    commands_set = [
        BotCommand(command="start", description="üîû –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å Ero no Sekai: Shinigami"),
        BotCommand(command="help", description="‚ÄºÔ∏è –ü–æ–º–æ—â—å"),
        BotCommand(command="free_rules", description="üìú –ü—Ä–∞–≤–∏–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"),
        BotCommand(command="buy_rules", description="üíé –ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"),
        BotCommand(command="price_list", description="‚öñÔ∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"),
        BotCommand(command="policy", description="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    ]
    await bot.set_my_commands(commands_set)

    logger.info(f"[set_bot_command] - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞")


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    log_level = logger.getEffectiveLevel()
    log_levels = {
        5: 'JSON-DEBUG',
        10: 'DEBUG',
        20: 'INFO',
        30: 'WARNING',
        40: 'ERROR',
        50: 'CRITICAL'
    }
    log_level_str = log_levels.get(log_level, 'UNKNOWN')

    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è users_data_repository ===
    try:
        logger.info("[Startup] - üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è users_data_repository...")
        users_data_repository = await init_users_data_repository()
        if users_data_repository is None:
            raise RuntimeError("UsersDataRepository is None")
        repositories.set_users_data_repository(users_data_repository)
        logger.info("[Startup] - ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è users_data_repository")
    except Exception as err:
        logger.critical(f"[Startup] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ users_data_repository: {err}")
        raise

    # === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware ===
    try:
        logger.info("[Startup] - üîÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ UsersDataMiddleware...")
        dp.update.middleware(UsersDataMiddleware(users_data_repository))
        logger.info("[Startup] - ‚úÖ UsersDataMiddleware –ø–æ–¥–∫–ª—é—á—ë–Ω")
    except Exception as err:
        logger.critical(f"[Startup] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ middleware: {err}")
        raise

    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è anime_cache_repository ===
    try:
        logger.info("[Startup] - üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è anime_cache_repository...")
        # –ø—Ä–æ–±–ª–µ–º–∞
        anime_cache_repository = await init_anime_cache_repository()
        if anime_cache_repository is None:
            raise RuntimeError("AnimeCacheRepository is None")
        repositories.set_anime_cache_repository(anime_cache_repository)
        await anime_cache_repository.export_cache_to_file()
        logger.info("[Startup][anime_cache_repository][export_cache_to_file] - ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à —Ñ–∞–π–ª–∞")
        logger.info("[Startup] - ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è anime_cache_repository")
    except Exception as err:
        logger.critical(f"[Startup] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ anime_cache_repository: {err}")
        raise


    # === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
    try:
        logger.info("[Startup] - üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        set_config(load_config_from_file())
        logger.info("[Startup] - ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as err:
        logger.critical(f"[Startup] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {err}")
        raise

    # === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ===
    try:
        logger.info("[Startup] - üîÅ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
        await set_bot_commands()
        logger.info("[Startup] - ‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as err:
        logger.critical(f"[Startup] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {err}")
        raise

    logger.info(f"[Startup] - ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level_str}")



async def main():
    await on_startup()

    web_task = asyncio.create_task(start_web_server())
    bot_task = asyncio.create_task(dp.start_polling(bot))

    done, pending = await asyncio.wait(
        [web_task, bot_task],
        return_when=asyncio.FIRST_COMPLETED
    )

    for task in pending:
        task.cancel()

    await bot.session.close()
    logger.info("[Main] - –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")



if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:

        logger.critical(f"[Main] - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ asyncio.run: {e}", exc_info=True)


# web: gunicorn web_app.run:app --bind 0.0.0.0:$PORT
# worker: python main.py
