from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from api.shikimori_api.shikimori_requests import send_data_character
from _configs.log_config import logger
from handlers.carousels.carousel_handlers import remove_character_tags
from tools.common_utils import delete_message_safe
import re
import asyncio

router = Router()


@router.message(Command("ssc"))
async def character_carousel_entry(message: types.Message, state: FSMContext, users_data, **kwargs):
    try:
        logger.debug("[CharacterCarouselEntry] ‚Äì –≤—Ö–æ–¥ –≤ —Ö–µ–Ω–¥–ª–µ—Ä, text=%r, from_id=%s",
                     message.text, message.from_user.id)

        args = message.text.split(" ", 1)
        logger.debug("[CharacterCarouselEntry] ‚Äì split args -> %r (types: %s)",
                     args, [type(a).__name__ for a in args])

        if len(args) < 2:
            logger.debug("[CharacterCarouselEntry] ‚Äì –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ /ssc, –æ—Ç–≤–µ—á–∞—é –ø–æ–¥—Å–∫–∞–∑–∫–æ–π")
            await message.reply(
                "üë§ –£–∫–∞–∂–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<code>/ssc Rem</code>",
                parse_mode="HTML"
            )
            return

        name = args[1].strip()
        logger.debug("[CharacterCarouselEntry] ‚Äì –ø–æ–ª—É—á–µ–Ω–æ –∏–º—è %r (—Ç–∏–ø %s)", name, type(name).__name__)

        mes = await message.answer(f"üîç –ò—â—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –∏–º–µ–Ω–∏: {name}...")
        logger.debug("[CharacterCarouselEntry] ‚Äì –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '–∏—â—É...', msg_id=%s", getattr(mes, "message_id", None))
        if mes:
            _ = await asyncio.create_task(delete_message_safe(mes, 5))

        try:
            logger.debug("[CharacterCarouselEntry] ‚Äì –≤—ã–∑—ã–≤–∞—é send_data_character(%r)", name)
            character_data = send_data_character(name)
            logger.debug("[CharacterCarouselEntry] ‚Äì send_data_character –≤–µ—Ä–Ω—É–ª: %r (—Ç–∏–ø %s)",
                         character_data, type(character_data).__name__)
        except Exception as e:
            logger.error("[CharacterCarouselEntry] ‚Äì –û—à–∏–±–∫–∞ –≤ send_data_character: %r (—Ç–∏–ø %s)",
                         e, type(e).__name__)
            raise

        characters = character_data.get("data", {}).get("characters", [])
        logger.debug("[CharacterCarouselEntry] ‚Äì —Å—ã—Ä—ã–µ characters: len=%d, %r",
                     len(characters), characters)
        characters = [char for char in characters if char is not None]
        logger.debug("[CharacterCarouselEntry] ‚Äì –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ characters: len=%d", len(characters))

        if not characters:
            logger.debug("[CharacterCarouselEntry] ‚Äì —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –æ—Ç–≤–µ—á–∞—é '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'")
            await message.reply("üòï –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        data = await state.get_data()
        logger.debug("[CharacterCarouselEntry] ‚Äì FSM –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: %r", data)
        last_msg_id = data.get("char_carousel_last_message_id")
        logger.debug("[CharacterCarouselEntry] ‚Äì last_msg_id = %r", last_msg_id)
        if last_msg_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
                logger.debug("[CharacterCarouselEntry] ‚Äì —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ %s", last_msg_id)
            except Exception as e:
                logger.warning("[CharacterCarouselEntry] ‚Äì –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %s: %s",
                               last_msg_id, e)

        new_carousel = {
            "characters": characters,
            "total": len(characters),
            "current_index": 0,
            "owner_id": message.from_user.id
        }
        await state.update_data(char_carousel=new_carousel, char_carousel_last_message_id=None)
        data_after = await state.get_data()
        logger.debug("[CharacterCarouselEntry] ‚Äì FSM –ø–æ—Å–ª–µ update: %r", data_after)

        await send_character_carousel_item(message, state)
        logger.debug("[CharacterCarouselEntry] ‚Äì —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—É—Å–µ–ª–∏")

    except Exception as e:
        logger.exception(f"[CharacterCarouselEntry] ‚Äì —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /ssc: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def send_character_carousel_item(message: types.Message | types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    carousel = data.get("char_carousel", {})
    characters = carousel.get("characters", [])
    index = carousel.get("current_index", 0)
    total = carousel.get("total", 0)

    if not characters or index >= total:
        await message.answer("üòµ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    char = characters[index]
    if not isinstance(char, dict):
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
        return

    name = char.get("russian") or char.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    description = (char.get("description") or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç").strip()

    logger.debug("[send_character_carousel_item] –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n%s", description)

    description = remove_character_tags(description).replace("<br>", "\n")
    description = convert_spoilers(description)
    logger.debug("[send_character_carousel_item] –ü–æ—Å–ª–µ convert_spoilers:\n%s", description)

    description = escape_md2_preserving_spoilers(description)
    logger.debug("[send_character_carousel_item] –ü–æ—Å–ª–µ escape_md2_preserving_spoilers:\n%s", description)

    description = safe_truncate_md2(description, 600)
    if description.endswith("..."):
        description = description[:-3] + "\\.\\.\\."

    url = char.get("url", "")
    image_url = char.get("poster", {}).get("originalUrl", "")

    origin = char.get("origin")
    if origin:
        type_map = {
            'anime': '–ê–Ω–∏–º–µ',
            'manga': '–ú–∞–Ω–≥–∞',
            'ranobe': '–†–∞–Ω–æ–±—ç'
        }
        kind = type_map.get(origin.get("type"), origin.get("type"))
        kind = escape_md2(kind)
        origin_name = escape_md2(origin.get("name", ""))
        origin_url = origin.get("url", "")
        origin_line = f"üé¨ *–ò—Å—Ç–æ—á–Ω–∏–∫:* {kind} [{origin_name}]({origin_url})"
    else:
        origin_line = "üé¨ *–ò—Å—Ç–æ—á–Ω–∏–∫:* –Ω–µ –Ω–∞–π–¥–µ–Ω"

    name = escape_md2(name)

    caption = (
        f"üë§ *{name}*\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}\n\n"
        f"{origin_line}\n\n"
        f"üîó [–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞ Shikimori]({url})"
    )

    logger.debug(f"[Caption Length] {len(caption)} / 1024")
    logger.debug("[send_character_carousel_item] –§–∏–Ω–∞–ª—å–Ω—ã–π caption –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n%s", caption)

    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="char_carousel:prev"),
        InlineKeyboardButton(text=f"{index + 1}/{total}", callback_data="char_carousel:noop"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data="char_carousel:next")
    ]])

    if isinstance(message, types.CallbackQuery):
        try:
            await message.message.edit_media(
                media=InputMediaPhoto(media=image_url, caption=caption, parse_mode="MarkdownV2"),
                reply_markup=markup
            )
        except Exception as e:
            logger.warning(f"[CarouselItem] - –û—à–∏–±–∫–∞: {e}")
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    else:
        msg = await message.answer_photo(
            photo=image_url,
            caption=caption,
            parse_mode="MarkdownV2",
            reply_markup=markup
        )
        await state.update_data(char_carousel_last_message_id=msg.message_id)


@router.callback_query(F.data.startswith("char_carousel:"))
async def handle_character_carousel(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, direction = callback.data.split(":")
        data = await state.get_data()
        carousel = data.get("char_carousel", {})
        owner_id = carousel.get("owner_id")

        if owner_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ —á—É–∂–∞—è –∫–∞—Ä—É—Å–µ–ª—å. –°–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ–º–∞–Ω–¥–æ–π /ssc ‚ú®", show_alert=True)
            return

        total = carousel.get("total", 0)
        index = carousel.get("current_index", 0)
        characters = carousel.get("characters", [])

        if not characters:
            await callback.answer("ü•≤ –ö–∞—Ä—É—Å–µ–ª—å –ø—É—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        if direction == "prev":
            index = (index - 1) % total
        elif direction == "next":
            index = (index + 1) % total
        else:
            await callback.answer()
            return

        await state.update_data(
            char_carousel={
                "characters": characters,
                "total": total,
                "current_index": index,
                "owner_id": owner_id
            }
        )

        await send_character_carousel_item(callback, state)

    except Exception as e:
        logger.error(f"[CharacterCarouselHandler] - {e}")
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
                              f"\nP.S. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ MESSAGE_TOO_LONG, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å –∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–±–µ–π—Ç–µ :)", show_alert=True)
    finally:
        await callback.answer()


# ====== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ======
def escape_md2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2,
    –æ—Å—Ç–∞–≤–ª—è—è '|' –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º (—á—Ç–æ–±—ã ||—Å–ø–æ–π–ª–µ—Ä|| —Ä–∞–±–æ—Ç–∞–ª),
    –Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Ç–æ—á–∫—É.
    """
    escaped = re.sub(r'([_*\[\]()~`>#+=\-{}.!\\])', r'\\\1', text)
    logger.debug("[escape_md2] –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n%s", escaped)
    return escaped

def escape_md2_preserving_spoilers(text: str) -> str:
    parts = re.split(r'(\|\|.*?\|\|)', text, flags=re.DOTALL)
    escaped_parts = []

    for part in parts:
        if part.startswith("||") and part.endswith("||"):
            inner = part[2:-2]
            escaped_inner = escape_md2(inner)
            escaped_parts.append(f"||{escaped_inner}||")
        else:
            escaped_parts.append(escape_md2(part))

    return ''.join(escaped_parts)


def convert_spoilers(text: str) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç [spoiler=–∑–∞–≥–æ–ª–æ–≤–æ–∫]—Ç–µ–∫—Å—Ç[/spoiler] –Ω–∞ ||—Ç–µ–∫—Å—Ç|| –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è,
    —á—Ç–æ–±—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî –ø–æ—Å–ª–µ.
    """
    return re.sub(r'\[spoiler(=.+?)?\](.*?)\[/spoiler\]', lambda m: f"||{m.group(2).strip()}||", text, flags=re.DOTALL)


def safe_truncate_md2(text: str, limit: int = 1000) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è MarkdownV2,
    —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å —Å–ø–æ–π–ª–µ—Ä—ã –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    result = ""
    length = 0
    in_spoiler = False
    i = 0

    while i < len(text) and length < limit:
        char = text[i]
        if text[i:i+2] == "||":
            in_spoiler = not in_spoiler
            result += "||"
            i += 2
            continue
        if char == "\\" and i + 1 < len(text):
            result += text[i:i+2]
            i += 2
            length += 1
        else:
            result += char
            i += 1
            length += 1

    if in_spoiler:
        result += "||"
    if i < len(text):
        result += "..."

    return result

