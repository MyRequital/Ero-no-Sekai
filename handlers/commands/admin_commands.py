from aiogram import Router, types, F
from aiogram.filters import Command, or_f
from aiogram.types import ChatPermissions, ChatMemberRestricted

from tools.common_utils import delete_message_safe
import asyncio
import datetime
from _configs.log_config import logger
from tools.common_utils import require_access
import re
from _configs.config import get_config
from tools.member_tools import send_dev_log

router = Router()

cfg = get_config()

LIMIT_WARNINGS = cfg.bot_config.limit_warnings

@router.message(Command("set_access"))
@require_access(9)
async def set_access(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\—É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é, –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É
    –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è access_lvl=2.
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã - —Ç—Ä–µ–±—É—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–Ω—è.

    –§–æ—Ä–º–∞—Ç: /set_access @user 5

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """

    args = command.args

    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /set_access @user 5")
        return

    parts = args.split()
    if len(parts) != 2:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /set_access @user 5")
        return

    username = parts[0].lstrip("@")
    access_lvl_str = parts[1]

    if not access_lvl_str.isdigit():
        await message.reply("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    access_lvl = int(access_lvl_str)
    target_user_id = await users_data.get_user_id(username)

    if not target_user_id:
        await message.reply(f"üôÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if target_user_id == message.from_user.id:
        await message.reply("ü§® –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    await users_data.set_access_lvl(target_user_id, access_lvl)
    await message.reply(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {access_lvl}.")


@router.message(or_f(Command("set_chat_nickname"), Command("scn")))
@require_access(8)
async def set_chat_nickname(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç-–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∏–¥–µ–Ω –≤ —á–∞—Ç-–ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/me, /whois @user)
    –§–æ—Ä–º–∞—Ç: /scn @user –ù–æ–≤—ã–π–ù–∏–∫

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """
    args = command.args

    if not args:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /scn @user –ù–æ–≤—ã–π–ù–∏–∫")
        return

    parts = args.split(maxsplit=1)
    if len(parts) != 2:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /scn @user –ù–æ–≤—ã–π–ù–∏–∫")
        return

    username = parts[0].lstrip("@")
    new_nickname = parts[1].strip()

    target_user_id = await users_data.get_user_id(username)

    if not target_user_id:
        await message.reply(f"üôÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not new_nickname:
        await message.reply("‚ö†Ô∏è –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    await users_data.set_display_name_mod(target_user_id, new_nickname)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º: <b>{new_nickname}</b>")


@router.message(Command("rw"))
@require_access(7)
async def reset_warnings(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–∫–ª—é—á–∞—è –±–∞–Ω, –º—É—Ç, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /rw @username

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """
    _ = asyncio.create_task(delete_message_safe(message, 60))

    try:
        if not command.args:
            reply = await message.reply('‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /rw @username')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        username = command.args.strip().lstrip('@')
        user_id = await users_data.get_user_id(username)

        if not user_id:
            reply = await message.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        try:
            member = await message.bot.get_chat_member(message.chat.id, user_id)

            if member.status == 'restricted' and isinstance(member, ChatMemberRestricted):
                permissions = ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=False
                )
                await message.bot.restrict_chat_member(
                    chat_id=message.chat.id,
                    user_id=user_id,
                    permissions=permissions
                )

        except Exception as e:
            logger.error(f"[ResetWarnings] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: user_id={user_id}, username=@{username}, error={e}")
            reply = await message.reply(
                f'‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</b> —É @{username}.\n'
                f'<i>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ —Å–±—Ä–æ—à–µ–Ω—ã.</i>'
            )
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        await users_data.set_warnings(user_id, 0)

        reply = await message.reply(
            f'‚úÖ <b>@{username}</b> ‚Äî <b>–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±–Ω—É–ª–µ–Ω—ã</b> –∏ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã</b>.\n'
            f'<i>–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.</i>'
        )
        _ = asyncio.create_task(delete_message_safe(reply, 60))

    except Exception as e:
        logger.error(f"[ResetWarnings] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ /rw: {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(Command("w"))
@require_access(7)
async def add_warning(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –§–æ—Ä–º–∞—Ç: /w @username [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=1]
    –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 1.

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """
    _ = asyncio.create_task(delete_message_safe(message, 60))

    try:
        args = command.args.split() if command.args else []
        if not args:
            reply = await message.reply('‚ùå –§–æ—Ä–º–∞—Ç: /w @username [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=1]')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        username = args[0].lstrip('@')
        try:
            points = int(args[1]) if len(args) > 1 else 1
            if points <= 0:
                raise ValueError
        except ValueError:
            reply = await message.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º > 0')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        user_id = await users_data.get_user_id(username)
        if not user_id:
            reply = await message.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        user_id = int(user_id)
        total_warnings, should_ban = await users_data.add_warning_to_user(user_id, points)

        if should_ban:
            until_date = datetime.datetime.now() + datetime.timedelta(days=3)
            await message.bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until_date
            )
            reply = await message.reply(
                f'‚õî <b>@{username}</b> –ø–æ–ª—É—á–∏–ª(-–∞) <b>–±–∞–Ω –Ω–∞ 3 –¥–Ω—è</b>!\n'
                f'(–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: <b>{total_warnings}/{LIMIT_WARNINGS}</b>)'
            )
        else:
            reply = await message.reply(
                f'‚ö†Ô∏è <b>@{username}</b> –ø–æ–ª—É—á–∏–ª(-–∞) <b>{points}</b> –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ(–∏–π).\n'
                f'–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>{total_warnings}/{LIMIT_WARNINGS}</b>'
            )

        _ = asyncio.create_task(delete_message_safe(reply, 60))

    except Exception as e:
        logger.error(f"[AddWarning] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥–µ /w: {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(or_f(Command("admin_menu"), Command("am")))
@require_access(7)
async def send_admin_menu(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—ã–ª–∞—é—â–∞—è '–∞–¥–º–∏–Ω –º–µ–Ω—é'.
    –ê–¥–º–∏–Ω –º–µ–Ω—é - –ø–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ–Ω—ã—Ö.

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """
    _ = asyncio.create_task(delete_message_safe(message, 60))

    try:
        admin_menu_text = (
            "<b>üìã –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"

            "üõë <code>/ban @username [–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö]</code>\n"
            "‚îî‚îÄ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"

            "üü¢ <code>/unban @username</code>\n"
            "‚îî‚îÄ –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"

            "üîÑ <code>/rw @username</code>\n"
            "‚îî‚îÄ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –º—É—Ç)\n"

            "‚ö†Ô∏è <code>/w @username [–∫–æ–ª-–≤–æ=1]</code>\n"
            "‚îî‚îÄ –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)\n\n"

            "üí¨ <code>/set_chat_nickname @username [–Ω–∏–∫]</code>\n"
            "üí¨ <code>/scn @username [–Ω–∏–∫]</code>\n"
            "‚îî‚îÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç-–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"

            "üìù <code>/set_admin_note @username [–∑–∞–º–µ—Ç–∫–∞]</code>\n"
            "üìù <code>/san @username [–∑–∞–º–µ—Ç–∫–∞]</code>\n"
            "‚îî‚îÄ –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –∑–∞–º–µ—Ç–∫—É\n"

            "üîê <code>/set_access [1-9]</code>\n"
            "‚îî‚îÄ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            
            "‚öô <code>/config_list</code>\n"
            "‚öô <code>/cfgl</code>\n"
            "‚îî‚îÄ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤. –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º\n"
            
            "‚öô <code>/set_config [–ø—É—Ç—å] [–∑–Ω–∞—á–µ–Ω–∏–µ]</code>\n"
            "‚ùó  <code> –ü–∞—Ä–∞–º–µ—Ç—Ä –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ /config_list ( = –∑–Ω–∞—á–µ–Ω–∏–µ) —Å—Ç–µ—Ä–µ—Ç—å\n"
            "‚îî‚îÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤\n"

            f"<i>‚öñÔ∏è –ü—Ä–∏ {LIMIT_WARNINGS}+ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –Ω–∞ 3 –¥–Ω—è</i>"
        )

        reply = await message.reply(admin_menu_text, parse_mode="HTML")
        _ = asyncio.create_task(delete_message_safe(reply, 300))

    except Exception as e:
        logger.error(f"[SendAdminMenu] - {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(or_f(Command("profile_menu"), Command("pm")))
@require_access(7)
async def send_profile_menu(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—ã–ª–∞—é—â–∞—è '–º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º'.
    –ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω—é - –ø–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ–Ω—ã—Ö.

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """
    _ = asyncio.create_task(delete_message_safe(message, 60))

    try:
        admin_menu_text = (
            "<b>üìã –ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"

            "üõë /me\n"
            "‚îî‚îÄ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"

            "üü¢ <code>/whois @username</code>\n"
            "‚îî‚îÄ –ü—Ä–æ—Ñ–∏–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"

            "üí¨ <code>/set_chat_nickname @username [–Ω–∏–∫]</code>\n"
            "üí¨ <code>/scn @username [–Ω–∏–∫]</code>\n"
            "‚îî‚îÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç-–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (8+)\n\n"

            "üìù <code>/set_admin_note @username [–∑–∞–º–µ—Ç–∫–∞]</code>\n"
            "üìù <code>/san @username [–∑–∞–º–µ—Ç–∫–∞]</code>\n"
            "‚îî‚îÄ –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –∑–∞–º–µ—Ç–∫—É (8+ –ª–≤–ª)\n\n"

            "‚ö†Ô∏è <code>/spi - /set_profile_icon</code>\n"
            "‚îî‚îÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ —á–∞—Ç-–ø—Ä–æ—Ñ–∏–ª—è (7+)\n"
            "‚îî‚îÄ ‚ùó –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–Ω–æ–≥–æ, —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
            
            f"üõ† –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /staff"
        )

        reply = await message.reply(admin_menu_text, parse_mode="HTML")
        _ = asyncio.create_task(delete_message_safe(reply, 300))

    except Exception as e:
        logger.error(f"[SendAdminMenu] - {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(F.text.regexp(r'–∏–≥–æ—Ä—å\s+—Ä–∞–∑–±–∞–Ω—å\s+@(\w+)', flags=re.IGNORECASE))
@require_access(8)
async def unban_user_custom(message: types.Message, users_data, **kwargs):
    """
    –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –§–æ—Ä–º–∞—Ç: –ò–≥–æ—Ä—å —Ä–∞–∑–±–∞–Ω—å @username

    :param message:
    :param users_data:
    :param kwargs:
    :return:
    """

    _ = asyncio.create_task(delete_message_safe(message, 60))
    match = re.search(r'–∏–≥–æ—Ä—å\s+—Ä–∞–∑–±–∞–Ω—å\s+@(\w+)', message.text, re.IGNORECASE)
    if not match:
        return

    username = match.group(1)
    user_id = await users_data.get_user_id(username)
    if not user_id:
        reply = await message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        _ = asyncio.create_task(delete_message_safe(reply, 60))
        return

    try:
        permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=False,
            can_send_other_messages=True,
            can_add_web_page_previews=False,
            can_change_info=False,
            can_invite_to_group=False,
            can_pin_messages=False
        )
        await message.bot.restrict_chat_member(message.chat.id, user_id, permissions=permissions)
        reply = await message.reply(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.')
        _ = asyncio.create_task(delete_message_safe(reply, 60))
    except Exception as e:
        logger.error(f"[UnbanUserCustom] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ.')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(Command("unban"))
@require_access(8)
async def unban_user_command(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –§–æ—Ä–º–∞—Ç: /unban @username

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """
    _ = asyncio.create_task(delete_message_safe(message, 60))

    try:
        if not command.args:
            reply = await message.reply('‚ùå –§–æ—Ä–º–∞—Ç: /unban @username')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        username = command.args.strip().lstrip('@')
        user_id = await users_data.get_user_id(username)
        if not user_id:
            reply = await message.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_change_info=False,
            can_invite_users=True,
            can_pin_messages=False
        )
        await message.bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=permissions
        )
        await users_data.set_warnings(user_id, 0)
        reply = await message.reply(f'‚úÖ @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω –∏ –ø—Ä–∞–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        _ = asyncio.create_task(delete_message_safe(reply, 300))

    except Exception as e:
        logger.error(f"[UnbanUserCommand] - ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(F.text.regexp(r'–∏–≥–æ—Ä—å\s+–∑–∞–±–∞–Ω—å\s+@(\w+)\s+–Ω–∞\s+(\d+)\s+–º–∏–Ω—É—Ç', flags=re.IGNORECASE))
@require_access(8)
async def ban_user_custom(message: types.Message, users_data, **kwargs):
    """
    –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ (–º–∏–Ω—É—Ç).
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: –ò–≥–æ—Ä—å –∑–∞–±–∞–Ω—å @user –Ω–∞ X:int –º–∏–Ω—É—Ç

    :param message:
    :param users_data:
    :param kwargs:
    :return:
    """
    _ = asyncio.create_task(delete_message_safe(message, 60))
    match = re.search(r'–∏–≥–æ—Ä—å\s+–∑–∞–±–∞–Ω—å\s+@(\w+)\s+–Ω–∞\s+(\d+)\s+–º–∏–Ω—É—Ç', message.text, re.IGNORECASE)
    if not match:
        return

    username = match.group(1)
    ban_time = int(match.group(2))
    user_id = await users_data.get_user_id(username)
    if not user_id:
        reply = await message.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        _ = asyncio.create_task(delete_message_safe(reply, 60))
        return

    until_date = datetime.datetime.now() + datetime.timedelta(minutes=ban_time)
    try:
        await message.bot.restrict_chat_member(
            message.chat.id,
            user_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        reply = await message.reply(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {ban_time} –º–∏–Ω—É—Ç.')
        _ = asyncio.create_task(delete_message_safe(reply, 60))
    except Exception as e:
        logger.error(f"[BanUserCustom] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ.')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(Command("ban"))
@require_access(8)
async def ban_user_command(message: types.Message, command: F.CommandObject, users_data, **kwargs):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç.
    –§–æ—Ä–º–∞—Ç: /ban @username –≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """

    _ = asyncio.create_task(delete_message_safe(message, 60))

    try:
        args = command.args.split() if command.args else []
        if len(args) < 2:
            reply = await message.reply('‚ùå –§–æ—Ä–º–∞—Ç: /ban @username –≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        username = args[0].lstrip('@')
        try:
            ban_time = int(args[1])
            if ban_time <= 0:
                raise ValueError
        except ValueError:
            reply = await message.reply('‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º > 0 (–º–∏–Ω—É—Ç—ã)')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        user_id = await users_data.get_user_id(username)
        if not user_id:
            reply = await message.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            _ = asyncio.create_task(delete_message_safe(reply, 60))
            return

        until_date = datetime.datetime.now() + datetime.timedelta(minutes=ban_time)
        await message.bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await users_data.set_warnings(user_id, 3)
        reply = await message.reply(f'‚úÖ @{username} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {ban_time} –º–∏–Ω—É—Ç')
        _ = asyncio.create_task(delete_message_safe(reply, 300))

    except Exception as e:
        logger.error(f"[BanUserCommand] - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
        reply = await message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ')
        _ = asyncio.create_task(delete_message_safe(reply, 60))


@router.message(or_f(Command("set_admin_note"), Command("san")))
@require_access(8)
async def set_admin_note(message: types.Message, command: Command, users_data, **kwargs):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ '–∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∞', —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã

    :param message:
    :param command:
    :param users_data:
    :param kwargs:
    :return:
    """
    args = message.text.split(maxsplit=2)

    if len(args) < 3 or not args[1].startswith("@"):
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /san @username –ó–∞–º–µ—Ç–∫–∞")
        return

    username = args[1][1:]
    note = args[2].strip()

    user_id = await users_data.get_user_id(username)
    if user_id is None:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await users_data.set_admin_note(user_id, note)
    await message.reply(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è @{username}")


# ====== UNUSED ======


@router.message(or_f(Command("test_ls_log"), Command("tll")))
@require_access(10)
async def test_ls_log_command(message: types.Message, command: Command, **kwargs):
    await send_dev_log(
        message.bot,
        message=f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {message.from_user.first_name}\n"
                f"(@{message.from_user.username})\n"
                f"[ID: {message.from_user.id}] –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É."
    )