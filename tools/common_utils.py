from data.cities import city_list
import dotenv
from aiogram.exceptions import TelegramBadRequest
from aiogram import F
import asyncio
from googletrans import Translator
from datetime import datetime
import requests
import json
from io import BytesIO
from _configs.log_config import logger
from data.bad_words import BAD_WORDS, CHAR_SUBSTITUTIONS, PSEUDO_SPACES
from functools import wraps
from aiogram import types
from database.repositories import get_users_data_repository
from _configs.config import get_config
import re
from itertools import product
from typing import Set, Tuple, Optional


cfg = get_config()


translator = Translator()
dotenv.load_dotenv()

WEATHER_TOKEN = cfg.weather_config.weather_token


def require_access(min_access_lvl):
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, command: F.CommandObject, users_data, **kwargs):
            initiator_user_id = message.from_user.id
            initiator_access_lvl = await users_data.get_access_lvl(initiator_user_id)

            if initiator_access_lvl < min_access_lvl:
                await message.reply(f"‚ùó –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–µ–Ω {min_access_lvl}-–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞."
                                    f"\n\n<i>*–û –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞.</i>")
                return

            return await func(message, command, users_data, **kwargs)

        return wrapper

    return decorator


def alternate_require_access(min_access_lvl: int):
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, command: F.CommandObject, **kwargs):
            users_data = get_users_data_repository()

            initiator_user_id = message.from_user.id
            initiator_access_lvl = await users_data.get_access_lvl(initiator_user_id)

            if initiator_access_lvl < min_access_lvl:
                await message.reply(
                    f"‚ùóÔ∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–µ–Ω {min_access_lvl}-–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞."
                    f"\n\n<i>–û –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞.</i>"
                )
                return

            return await func(message, command, users_data=users_data, **kwargs)

        return wrapper

    return decorator


def get_last_valid_letter(city: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –¨, –´, –™."""
    logger.debug(f"[City] - {city}")
    city = city.lower().strip()
    for letter in reversed(city):
        if letter not in "—å—ä—ã":
            return letter
    return city[-1]


def is_valid_city(city: str) -> bool:
    print(city, '–≤ –∏—Å –≤–∞–ª–∏–¥ —Å–∏—Ç–∏')
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)"""
    city = " ".join(city.lower().strip().split())
    return any(city == c.lower() for cities in city_list.values() for c in cities)


def get_next_city(last_letter: str, used_cities: set) -> str | None:
    """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–∞ –Ω—É–∂–Ω—É—é –±—É–∫–≤—É, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ"""
    last_letter = last_letter.lower()
    used_cities = {c.lower() for c in used_cities}

    logger.debug(f"[LastLetter] - {last_letter}")

    possible_cities = [
        city for city in (city_list.get(last_letter, []) or [])
        if city.lower() not in used_cities
    ]

    return possible_cities[0] if possible_cities else None


def get_weather_with_icon(city: str):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_TOKEN}&units=metric&lang=ru"

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()

        def format_unix_time(ts):
            return datetime.fromtimestamp(ts).strftime("%H:%M")

        main = data["main"]
        wind = data["wind"]
        sys = data["sys"]
        weather = data["weather"][0]
        clouds = data["clouds"]

        icon_code = weather.get("icon", "")
        icon_url = f"http://openweathermap.org/img/wn/{icon_code}@4x.png"
        icon_image = requests.get(icon_url).content

        message = (
            f"üèô <b>–ì–æ—Ä–æ–¥:</b> {data.get('name')}\n"
            f"üå§ <b>–ü–æ–≥–æ–¥–∞:</b> {weather.get('description').capitalize()}\n"
            f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {main.get('temp')}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {main.get('feels_like')}¬∞C)\n"
            f"üìà <b>–ú–∏–Ω/–ú–∞–∫—Å:</b> {main.get('temp_min')}¬∞C / {main.get('temp_max')}¬∞C\n"
            f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {main.get('humidity')}% {'- –û–π –∫–∞–∫ –≤–ª–∞–∂–Ω–æ, –ø—Ä–æ–º–æ–∫–ª–∞ –¥–∞–∂–µ —è...' if main.get('humidity') == 70 else ''}\n"
            f"üîª <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {main.get('pressure')} –≥–ü–∞\n"
            f"‚òÅÔ∏è <b>–û–±–ª–∞—á–Ω–æ—Å—Ç—å:</b> {clouds.get('all')}%\n"
            f"üí® <b>–í–µ—Ç–µ—Ä:</b> {wind.get('speed')} –º/—Å\n"
            f"üåÖ <b>–í–æ—Å—Ö–æ–¥:</b> {format_unix_time(sys.get('sunrise'))}\n"
            f"üåá <b>–ó–∞–∫–∞—Ç:</b> {format_unix_time(sys.get('sunset'))}"
        )

        return message, BytesIO(icon_image)

    except requests.exceptions.RequestException as e:
        logger.error(f'[WeatherError] - {e}')
        return None, None


async def delete_message_safe(message: types.Message, delay: int = 0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        if delay > 0:
            await asyncio.sleep(delay)

        await message.delete()
        logger.debug(f"[DeleteMessage] - –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    except TelegramBadRequest as e:
        if "message to delete not found" in str(e):
            logger.warning(f"[DeleteMessage] - –°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        else:
            logger.error(f"[DeleteMessage] - –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")
    except Exception as e:
        logger.error(f"[DeleteMessage] - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def generate_variants(word: str, substitutions: dict) -> Set[str]:
    variants = [[] for _ in range(len(word))]
    for i, char in enumerate(word):
        variants[i] = substitutions.get(char, [char])
    return {''.join(v) for v in product(*variants)}


def normalize_word(word: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å—ë, –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä. –û—á–∏—â–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã."""
    cleaned = re.sub(PSEUDO_SPACES, '', word)
    cleaned = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9]+', '', cleaned)
    return cleaned.lower()


def get_all_variants(words: Set[str], substitutions: dict) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø—É: –≤–∞—Ä–∏–∞–Ω—Ç -> –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ"""
    variant_map = {}
    for word in words:
        for variant in generate_variants(word, substitutions):
            variant_map[variant] = word
    return variant_map


BAD_WORD_VARIANT_MAP = get_all_variants(BAD_WORDS, CHAR_SUBSTITUTIONS)


def check_bad_words(text: str):
    text = re.sub(PSEUDO_SPACES, ' ', text)
    words = re.findall(r'\b\w+\b', text.lower())

    for original_word in words:
        cleaned = normalize_word(original_word)
        logger.debug(f"[–ú–∞—Ç-—Ñ–∏–ª—å—Ç—Ä] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞: '{original_word}' ‚Üí '{cleaned}'")

        if cleaned in BAD_WORD_VARIANT_MAP:
            trigger_word = BAD_WORD_VARIANT_MAP[cleaned]
            return True, original_word, trigger_word
    return False, None, None


async def async_translate(text: str, scr="ru", dest_lang: str = 'en') -> str:
    '''
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫.

    :param text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    :param scr: –ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫
    :param dest_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'en')
    :return: –ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    '''

    result = await translator.translate(text, src=scr, dest=dest_lang)

    logger.debug("[Translate]"
                 f"\n{text}"
                 f"\n{result}")

    return result.text

def get_player_url(kodik_link: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–∫–∏.
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–±–æ—Ä –∏—Ç–æ–≥–æ–≤–æ–π url-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–ª–µ–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –Ω–µ–π.

    :param kodik_link: iFrame —Å—Å—ã–ª–∫–∞
    :return: URL-—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø–ª–µ–µ—Ä–æ–º
    """
    return f'https://ero-no-sekai.up.railway.app/watch/?url=https:{kodik_link}'


def get_kodik_response(shikimori_id: Optional[str | int]) -> requests.Response:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ KodikAPI, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Response –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π.
    *–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, url-—Å—Ç—Ä–æ–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è KodikAPI Token –ø–æ–ª—É—á–∞–µ–º—ã–π –∏–∑ Config(cfg) –æ–±—ä–µ–∫—Ç–∞.

    :param shikimori_id: ID –∞–Ω–∏–º–µ –ø–æ Shikimori.one
    :return: Response –æ–±—ä–µ–∫—Ç
    """
    url = f"https://kodikapi.com/search?token={cfg.web_app_config.kodik_token}&shikimori_id={shikimori_id}"
    response = requests.get(url)

    try:
        data = response.json()
        results = data.get("results", [])
        if response.status_code == 200 and not results:
            logger.warning(
                f"[get_kodik_data] - –í–µ—Ä–Ω—É–ª 0 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É shikimori_id={shikimori_id} "
                f"(url={url})\n–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {json.dumps(data, indent=4, ensure_ascii=False)}"
            )
    except Exception as e:
        logger.error(
            f"[get_kodik_data] - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}\n–û—Ç–≤–µ—Ç: {response.text}"
            f"Status Code: {response.status_code}"
        )

    return response


def get_kodik_data_for_site(shikimori_id: Optional[str | int] = None,
                            kinopoisk_id: Optional[str | int] = None
                            ):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ KodikAPI, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Response –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π.
    *–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, url-—Å—Ç—Ä–æ–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è KodikAPI Token –ø–æ–ª—É—á–∞–µ–º—ã–π –∏–∑ Config(cfg) –æ–±—ä–µ–∫—Ç–∞.

    :param shikimori_id: ID –∞–Ω–∏–º–µ –ø–æ Shikimori.one
    :param kinopoisk_id: ID —Ñ–∏–ª—å–º–∞\—Å–µ—Ä–∏–∞–ª–∞ –∏–∑ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
    :return: data
    """
    if shikimori_id:
        url = f"https://kodikapi.com/search?token={cfg.web_app_config.kodik_token}&shikimori_id={shikimori_id}"
    elif kinopoisk_id:
        url = f"https://kodikapi.com/search?token={cfg.web_app_config.kodik_token}&kinopoisk_id={kinopoisk_id}"


    response = requests.get(url)

    try:
        data = response.json()
        results = data.get("results", [])
        if response.status_code == 200 and not results:
            logger.warning(
                f"[get_kodik_data] - –í–µ—Ä–Ω—É–ª 0 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É shikimori_id={shikimori_id} "
                f"(url={url})\n–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: {json.dumps(data, indent=4, ensure_ascii=False)}"
            )
    except Exception as e:
        logger.error(
            f"[get_kodik_data] - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}\n–û—Ç–≤–µ—Ç: {response.text}"
            f"Status Code: {response.status_code}"
        )
        return None

    return data['results'][0]


logger.info("[Utils] - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
