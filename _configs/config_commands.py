from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, or_f
from _configs.config import get_config
from _configs.config_io import save_config_to_file
from _configs.config_utils import list_model_paths, set_config_value
from tools.common_utils import require_access


router = Router()


@router.message(or_f(Command("config_list"), Command("cfgl")))
@require_access(9)
async def cmd_config_list(message: Message, users_data, command: F.CommandObject):
    if message.chat.type != "private":
        await message.answer(
            "‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.\n"
            "üîê –î–æ—Å—Ç—É–ø –¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ <b>9 –∏ –≤—ã—à–µ</b>."
        )
        return

    cfg = get_config()
    lines = list_model_paths(cfg)

    if not lines:
        await message.answer("<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞.</b>", parse_mode="HTML")
        return

    wrapped_lines = [f"<code>{line}</code>" for line in lines]
    text = "\n".join(wrapped_lines)

    await message.answer(f"<b>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n{text}")



@router.message(or_f(Command("set_config"), Command("scfg")))
@require_access(9)
async def cmd_set_config(message: Message, users_data, command: F.CommandObject):
    parts = message.text.strip().split()

    if len(parts) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_config <–ø—É—Ç—å> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    command = parts[0]
    value = parts[-1]
    path = parts[1:-1]

    cfg = get_config()
    try:
        set_config_value(cfg, path, value)
        save_config_to_file(cfg)
        await message.answer(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <code>{' '.join(path)}</code> = <code>{value}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: <code>{e}</code>\nParams: path={' '.join(path)}, value={value}",
            parse_mode="HTML"
        )